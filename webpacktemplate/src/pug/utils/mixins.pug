- 
  var contentForRichCheckbox = [
      "Ширина коридоров в номере не менее 91 см",
      "На 1 этаже вас встретит специалист и проводит до номера"
  ];

mixin item(title, descr)
  .item
    h2.item-title= title
    p.item-descr= descr

mixin logo()
  svg(width="48" height="48" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg" class="logo")
    path(d="M23.9989 32.4712C23.2224 32.4712 22.5871 31.8359 22.5871 31.0594C22.5871 25.6241 18.14 21.177 12.7047 21.177C11.9283 21.177 11.293 20.5418 11.293 19.7653C11.293 18.9888 11.9283 18.3535 12.7047 18.3535C19.7283 18.3535 25.4106 24.0359 25.4106 31.0594C25.4106 31.8359 24.7753 32.4712 23.9989 32.4712Z" fill="#1F2041" fill-opacity="0.25")
    path(d="M36.7068 19.7653C36.7068 20.5418 36.0715 21.177 35.295 21.177C31.9421 21.177 28.9421 22.8712 27.1774 25.4476C26.7892 24.4594 26.3303 23.5418 25.7656 22.6947C28.095 20.0123 31.5186 18.3535 35.295 18.3535C36.0715 18.3535 36.7068 18.9888 36.7068 19.7653Z" fill="#1F2041" fill-opacity="0.25")
    path(d="M24 48C10.7647 48 0 37.2353 0 24C0 10.7647 10.7647 0 24 0C37.2353 0 48 10.7647 48 24C48 37.2353 37.2353 48 24 48ZM24 2.82353C12.3176 2.82353 2.82353 12.3176 2.82353 24C2.82353 35.6824 12.3176 45.1765 24 45.1765C35.6824 45.1765 45.1765 35.6824 45.1765 24C45.1765 12.3176 35.6824 2.82353 24 2.82353Z" fill="#1F2041" fill-opacity="0.25")

mixin dark_item(perOfShade)
  div(class=`color-item__image color-item__image_shade` + perOfShade)
  .color-item__text
    span.color-item__title Dark Shade #{perOfShade}%
    br
    span.color-item__content #1F2041

mixin color_item(color, hex)
  div(class=`color-item__image color-item__image_` + color)
  .color-item__text
    span.color-item__title #{color}
    br
    span.color-item__content #{hex}

mixin type_item(tag, text)
  div(class="type-item__" + tag)
    .type-item__left #{tag}
    .type-item__right #{text}

mixin text-field(label_text, type, input_class, placeholder_text)
  label(for= type, class="label-text") #{label_text}
  br
  input(type=type,id=type, class=input_class, placeholder=placeholder_text)

mixin dropdown(text, label_wrap, label_text, list_name)
  span.label-text #{text}
  br
  div(class="select " + label_wrap)
    label(for= list_name class="select-expanded__label") #{label_text}
    +arrow-down  

mixin arrow-down
  .arrow.arrow_down
    <i class="material-icons">keyboard_arrow_down</i>

mixin arrow-forward
  .arrow.arrow_forward
    <i class="material-icons">arrow_forward</i>

mixin dropdown_expanded(text, label_text, label_wrap, list_name, number_value, ...option_texts)  
  span.label-text #{text}
  br
  div(class="select " + label_wrap)
    label(for= list_name class="select-expanded__label") #{label_text}
    +arrow-down
  input(type="checkbox" id= list_name)                
  div(class="select-expanded__options options-list " + list_name)
    each option_text, index in option_texts
      .options-list__item
        .option-item
          span #{option_text}
          .option-counter
            .option-counter__minus-wrap
              span.option-counter__item -
            span.option-counter__number #{number_value}
            .option-counter__plus-wrap
              span.option-counter__item +
    if list_name === "guests-list"
      .options-list__btns
        .select-btns
          span.select-btns__submit применить

mixin checkbox_expanded(name, label_additional_class="", checkbox_num, ...label__texts)    
  .checkboxes__content
    each label__text, index in label__texts
      .checkboxes__item
        input(type="checkbox" id="checkbox" + checkbox_num + "_" + index name= name value=label__text)
        label(for="checkbox" + checkbox_num + "_" + index class="checkboxes__label " + label_additional_class) #{label__text}
        if name === "accessibility"
          div.label-descr= contentForRichCheckbox[index] 

mixin number-information__item(pic_text, title, text)
  .number-information__item
    .number-information__pic
      <i class="material-icons face">#{pic_text}</i>
    .number-information__content
      span.number-information__title #{title}
      br
      span.number-information__text #{text}

mixin radio_items(...label_texts)
  each label_text, index in label_texts
    .radio-list__item.radio-item
      input(type="radio" id="radio" + index name="gender")
      label(for="radio" + index class="radio-item__label number-information__text") #{label_text}

mixin like_button(value, btn_class="", icon_name)
  div(class="like-button " + btn_class)
    <i class="material-icons like-button__heart">#{icon_name}</i>
    span.like-button__value #{value}

mixin rate_buttons(marked_count)
  - for (var x = 1; x <= 5; x++)
    if x <= marked_count
      <i class="material-icons rate-buttons__star">star_rate</i>
    else
      <i class="material-icons rate-buttons__star">star_border</i>

mixin users-comments(img_name, like_value, btn_class="", icon_name, username, date, text)
  .comments
    .comments__div_left
      .img_wrap
        img(src="../../assets/img/users/" + img_name + ".svg", class="comments__img")
      +like_button(like_value, btn_class="", icon_name)
    .comments__div_right.number-information__content
      .comments__username.number-information__title #{username}
      .comments__date #{date}
      .comments__text #{text}


    




      



